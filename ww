function Resolve-HTMLMarkdown{
    param (
        [Parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]
        [string]
        $OriginalString,
        [Parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]
        [string]
        $HTMLReplace
    )

    # Replace markdown with italics substitution
    if ($HTMLReplace.ToLower() -match "italic") {
        $ResolvedString = $OriginalString -replace '(_)([^\v][^_]*[^\v])?(_)', '<i>${2}</i>'
        return $ResolvedString
    } elseif($HTMLReplace.ToLower() -match "bold") {
        $ResolvedString = $OriginalString -replace '(\*\*)(.*?)(\*\*)', '<b>${2}</b>'
        return $ResolvedString
    } else {
        $InvalidHTMLReplace = New-Object System.ArgumentException "$HTMLReplace is not valid"
        throw $InvalidHTMLReplace
        return $OriginalString
    }
}

function Import-BaselineInstructions {
    <#
    .Description
    This function parses the secure baseline via each product markdown document to align policy with the
    software baseline.
    .Functionality
    Internal
    #>
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateSet("teams", "exo", "defender", "aad", "powerplatform", "sharepoint", 'powerbi', IgnoreCase = $false)]
        [string[]]
        $ProductNames,
        [Parameter(Mandatory = $false)]
        [ValidateScript({Test-Path -PathType Container $_})]
        [string]
        $BaselinePath = (Join-Path -Path $PSScriptRoot -ChildPath "./baselines")
    )
    $IdToInstruction = @{}
    foreach ($Product in $ProductNames) {
        Write-Debug "Processing secure baseline markdown for $Product"
        $ProductPath = Join-Path -Path $BaselinePath -ChildPath "$Product.md"
        $MdLines = Get-Content -Path $ProductPath

        $LengthOfSuffix = " Instructions".Length # The length of the suffix
        $InstructionsIdRegex =  "#### [A-Za-z]+\.[$($Product.ToUpper())]+\.\d+.\d+v\d+\s*Instructions"
        $GroupRegex = "^## [0-9]+\."
        $TLPEnd = "**`TLP:CLEAR`**"
        # Select-String line numbers aren't 0-indexed, hence the "-1" on the next line
        $LineNumbers = Select-String $InstructionsIdRegex $ProductPath | ForEach-Object {$_."LineNumber"-1}

        foreach ($LineNumber in $LineNumbers) {
            $InstructionsId = [string]$MdLines[$LineNumber].Substring(5)
            $InstructionsId = $InstructionsId.SubString(0, $InstructionsId.Length - $LengthOfSuffix)
            $IdToInstruction[$InstructionsId] = ""
            $CurrentLine = $LineNumber
            Write-Host $InstructionsId

            $EndInstruction = $false
            while (-not $EndInstruction) {
                $CurrentLine +=1
                $Instruction = $MdLines[$CurrentLine]
                $IdToInstruction[$InstructionsId] += "\n" + $Instruction
                $EndInstruction = ( ($Instruction -match $InstructionsIdRegex) -or
                ($Instruction -match $GroupRegex) -or
                ($Instruction -eq $TLPEnd))
                Write-Host $Instruction
                Write-Host $EndInstruction
                if ($CurrentLine -gt 1000) {break}
            }
        }
    }
    Write-host "the end"
    foreach($key in $IdToInstruction.keys) {
        Write-Host $key
        Write-Host $IdToInstruction[$key]
    }
}

function Import-SecureBaseline {
    <#
    .Description
    This function parses the secure baseline via each product markdown document to align policy with the
    software baseline.
    .Functionality
    Internal
    #>
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateSet("teams", "exo", "defender", "aad", "powerplatform", "sharepoint", 'powerbi', IgnoreCase = $false)]
        [string[]]
        $ProductNames,
        [Parameter(Mandatory = $false)]
        [ValidateScript({Test-Path -PathType Container $_})]
        [string]
        $BaselinePath = (Join-Path -Path $PSScriptRoot -ChildPath "..\..\baselines\")
    )
    $Output = @{}

    foreach ($Product in $ProductNames) {
        try {
            Write-Debug "Processing secure baseline markdown for $Product"
            $Output[$Product] = @()
            $ProductPath = Join-Path -Path $BaselinePath -ChildPath "$Product.md"
            $MdLines = Get-Content -Path $ProductPath

            # Select-String line numbers aren't 0-indexed, hence the "-1" on the next line
            $LineNumbers = Select-String "^## [0-9]+\." $ProductPath | ForEach-Object {$_."LineNumber"-1}
            $Groups = $LineNumbers | ForEach-Object {$MdLines[$_]}
            Write-Debug "Found $($Groups.Count) groups"

            foreach ($GroupName in $Groups) {
                $Group = @{}
                $Group.GroupNumber = $GroupName.Split(".")[0].SubString(3) # 3 to remove the "## "
                $Group.GroupName = $GroupName.Split(".")[1].Trim() # 1 to remove the leading space
                $Group.Controls = @()

                $IdRegex =  "#### MS\.[$($Product.ToUpper())]+\.$($Group.GroupNumber)\.\d+v\d+\s*$"
                # Select-String line numbers aren't 0-indexed, hence the "-1" on the next line
                $LineNumbers = Select-String $IdRegex $ProductPath | ForEach-Object {$_."LineNumber"-1}

                # Iterate over matched policy ids found
                foreach ($LineNumber in $LineNumbers) {
                    $Value = [System.Net.WebUtility]::HtmlEncode($Value)
                    $Id = [string]$MdLines[$LineNumber].Substring(5)

                    if ($Id.EndsWith("X")){
                        $Deleted = $true
                        $Id = $Id -Replace ".$"
                        $Value = "[DELETED] " + $Value
                    }
                    else {
                        $Deleted = $false
                    }

                    # This assumes that the value is on the immediate next line after the ID and ends in a period.
                    $LineAdvance = 1;
                    $MaxLineSearch = 20;
                    $Value = ([string]$MdLines[$LineNumber+$LineAdvance]).Trim()
                    $IsMalformedDescription = $false
                    $IsList = $false

                    try {
                        if ([string]::IsNullOrWhiteSpace($Value)){
                            $IsMalformedDescription = $true
                            $Value = "Error - The baseline policy text is malformed. Description should start immediately after Policy Id."
                            Write-Error "Expected description for $Id to start on line $($LineNumber+$LineAdvance)"
                        }

                        $SupplementalStrings = ""

                        # Processing multiline description.
                        # TODO: Improve processing GitHub issue #526
                        while ($Value.Substring($Value.Length-1,1) -ne "."){
                            $LineAdvance++

                            if ($Value -match [regex]::Escape("<!--")){
                                # Reached Criticality comment so policy description is complete.
                                break
                            }

                            # Policy description contains a list assuming list is denoted by a colon character.
                            if ($Value[-1] -eq ":") {
                                $isList = $true
                            }

                            if (-not [string]::IsNullOrWhiteSpace([string]$MdLines[$LineNumber+$LineAdvance])) {
                                # List case, use newline character between value text
                                if ($isList) {
                                    $Value += "`n" + ([string]$MdLines[$LineNumber+$LineAdvance]).Trim()
                                }
                                else { # Value ending with newline char, use whitespace character between value text
                                    $Value += " " + ([string]$MdLines[$LineNumber+$LineAdvance]).Trim()
                                }
                            }

                            if ($LineAdvance -gt $MaxLineSearch){
                                Write-Warning "Expected description for $id to end with period and be less than $MaxLineSearch lines"
                                break
                            }
                        }

                        # Description italics substitution
                        $Value = Resolve-HTMLMarkdown -OriginalString $Value -HTMLReplace "italic"

                        # Description bold substitution
                        $Value = Resolve-HTMLMarkdown -OriginalString $Value -HTMLReplace "bold"

                        # Ingest Rationale, Note, etc.
                        $AdvanceSupplemental = 1
                        $Supplemental = $LineNumber+$LineAdvance+2
                        $SupplementalText = [string]$MdLines[$Supplemental]
                        #Write-Host $SupplementalText
                        $ForceMarch = $True
                        while (-not [string]::IsNullOrWhiteSpace([string]$MdLines[$Supplemental+$AdvanceSupplemental])) {
                            # add a unique delimiter
                            $SupplementalText += "scubacarpool" + [string]$MdLines[$Supplemental+$AdvanceSupplemental]
                            $AdvanceSupplemental += 1
                        }

                        # this is hacky; might possibly need to add better delimeters to the markdown itself
                        $SupplementalContent = $SupplementalText -split "scubacarpool"
                        $Rationale = [string]($SupplementalContent[1])
                        $Rationale = $Rationale.Substring(2, $Rationale.Length - 2)
                        $LastModified = [string]($SupplementalContent[2])
                        $LastModified = $LastModified.Substring(2, $LastModified.Length - 2)
                        # # defensive, note will show up as empty string in the output 99% of the time
                        $Note = ""
                        if ($SupplementalContent.Length -gt 2) {
                            if (-not [string]::IsNullOrWhiteSpace([string]$SupplementalContent[3])) {
                                $Note = $SupplementalContent[3]
                                $Note = $Note.Substring(2, $Note.Length - 2)
                            }
                        }

                        $Group.Controls += @{
                            "Id"=$Id;
                            "Value"=$Value;
                            "Deleted"=$Deleted;
                            "Rationale"=$Rationale;
                            "LastModified"=$LastModified;
                            "Note"=$Note;
                            MalformedDescription=$IsMalformedDescription
                        }
                    }
                    catch {
                        Write-Error "Error parsing for policies in Group $($Group.GroupNumber). $($Group.GroupName)"
                    }
                }

                $Output[$Product] += $Group
            }
        }
        catch {
            Write-Error -RecommendedAction "Check validity of $Product secure baseline markdown at $ProductPath" `
                -Message "Failed to parse $ProductName secure baseline markdown."
        }
    }
    ConvertTo-Json @($Output) -Depth 5 | Set-Content -Path .\testscubamarkdown.json -Encoding UTF8 -ErrorAction 'Stop'
}

$ProductNames = @("powerplatform", "teams", "exo", "defender", "aad", "powerplatform", "sharepoint", "powerbi")
# Import-SecureBaseline -ProductNames $ProductNames   -BaselinePath .\baselines

Import-BaselineInstructions -ProductNames powerplatform -BaselinePath .\baselines
